// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.unlv.cs.rebelhotel.file;

import edu.unlv.cs.rebelhotel.file.FileUpload;
import java.util.List;
import java.util.Random;
import org.springframework.stereotype.Component;

privileged aspect FileUploadDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FileUploadDataOnDemand: @Component;
    
    private Random FileUploadDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<FileUpload> FileUploadDataOnDemand.data;
    
    public FileUpload FileUploadDataOnDemand.getNewTransientFileUpload(int index) {
        edu.unlv.cs.rebelhotel.file.FileUpload obj = new edu.unlv.cs.rebelhotel.file.FileUpload();
        obj.setMessage("message_" + index);
        obj.setSuccessful(Boolean.TRUE);
        obj.setStartOfExecution(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        obj.setEndOfExecution(new java.util.GregorianCalendar(java.util.Calendar.getInstance().get(java.util.Calendar.YEAR), java.util.Calendar.getInstance().get(java.util.Calendar.MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_MONTH), java.util.Calendar.getInstance().get(java.util.Calendar.HOUR_OF_DAY), java.util.Calendar.getInstance().get(java.util.Calendar.MINUTE), java.util.Calendar.getInstance().get(java.util.Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime());
        return obj;
    }
    
    public FileUpload FileUploadDataOnDemand.getSpecificFileUpload(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        FileUpload obj = data.get(index);
        return FileUpload.findFileUpload(obj.getId());
    }
    
    public FileUpload FileUploadDataOnDemand.getRandomFileUpload() {
        init();
        FileUpload obj = data.get(rnd.nextInt(data.size()));
        return FileUpload.findFileUpload(obj.getId());
    }
    
    public boolean FileUploadDataOnDemand.modifyFileUpload(FileUpload obj) {
        return false;
    }
    
    public void FileUploadDataOnDemand.init() {
        data = edu.unlv.cs.rebelhotel.file.FileUpload.findFileUploadEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'FileUpload' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<edu.unlv.cs.rebelhotel.file.FileUpload>();
        for (int i = 0; i < 10; i++) {
            edu.unlv.cs.rebelhotel.file.FileUpload obj = getNewTransientFileUpload(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
